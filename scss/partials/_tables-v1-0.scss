@if $tables-v1-0 {
	.table {
		margin: 0 0 $base-spacing;

		border: $base-border;
		border-radius: $base-border-radius;
		border-bottom: none;

		.sorting {
			position: relative;

			padding-right: $small-spacing + $base-triangle-size;

			cursor: pointer;

			&::before,
			&::after {
				@include position(absolute, 50% $extra-small-spacing null null);
				@include transform(translateY(-50%));

				content: '';
			}

			&::before {
				@include triangle($base-triangle-size, color('text', 'general', .50), up);

				margin-top: (($base-triangle-size * 0.5) * -1);
			}

			&::after {
				@include triangle($base-triangle-size, color('text', 'general', .50), down);

				margin-top: ($base-triangle-size * 0.5);
			}

			@include modifier('icon') {
				padding-right: $small-spacing;

				@each $size in $sizes {
					&-#{$size} {				
						&::before,
						&::after {
							@include position(absolute, 50% auto auto 50%);
							@include transform(translate(-50%, -50%));

							margin-left: map-get(map-get($icon-sizes, $size), 'width') + ($extra-small-spacing * 0.5);
						}
					}
				}
			}
		}

		table {
			width: 100%;

			background-color: color('table', 'background');

			td, th {
				padding: $extra-small-spacing $small-spacing;
			}

			tr {
				&:nth-child(odd) {
					background-color: color('table-odd', 'background');
				}
			}

			th {				
				border-bottom: $base-border;

				background-color: color('table-head', 'background');

				color: pick-visible-color(
					color('table-head', 'background'),
					color('text', 'general'),
					color('text-inverted', 'general')
				);
			}

			td {
				border-bottom: $base-border;				

				color: pick-visible-color(
					color('table-head', 'background'),
					color('text', 'general'),
					color('text-inverted', 'general')
				);

				&:last-child {
					text-align: right;
				}
			}
		}
	}	
}