@if $button-v1-0 {
	#{$all-buttons} {
		@include appearance(none);
		@include user-select(none);

		margin:  0; 
		padding: 0;

		border: none;

		background: none;

		cursor: pointer;
	} 

	.button {
		@include transition($base-duration $base-timing);		

		position: relative;		

		display: inline-block;
 
		height: $base-button-height;

		padding: 0 $small-spacing;	

		border-radius: $base-border-radius;

		background-color: transparent;
		
		color: color('text', 'general');
		text-decoration: none;
		line-height: $base-button-height;

		cursor: pointer;		

		&:disabled {
			opacity: .65;
		}

		// Flat
		@include modifier('flat') {	
			position: relative;

			background-color: color('button', 'general');

			color: pick-visible-color(
				color('button', 'general'),
				color('text', 'general'),
				color('text-inverted', 'general')
			);

			&::after {
				@include position(absolute, null null 0 0);
				@include transition($base-duration $base-timing);

				opacity: 0;
 
				width: 100%;
				height: 100%;

				box-shadow: inset 0 (($base-border-width * 2) * -1) 0 color('shadow', 'general', .25);

				content: '';
			}

			&:hover:not(:disabled)::after {
				opacity: 1;
			}

			[class^='icon'], [class*='icon'] {
				color: pick-visible-color(
					color('button', 'general'),
					color('text', 'general'),
					color('text-inverted', 'general')
				);
				fill: pick-visible-color(
					color('button', 'general'),
					color('text', 'general'),
					color('text-inverted', 'general')
				);
			}
		}

		// Inverted
		@include modifier('inverted') {
			box-shadow: inset 0 0 0 $base-border-width color('border-inverted', 'general');

			color: color('text-inverted', 'general');			

			&:hover:not(:disabled),
			&.active:not(:disabled) {
				background-color: color('button-inverted', 'general');

				color: color('text-secondary', 'general');

				[class^='icon'], [class*='icon'] {
					color: color('text-secondary', 'general');
					fill: color('text-secondary', 'general');
				}
			}

			[class^='icon'], [class*='icon'] {
				color: color('text-inverted', 'general');
				fill: color('text-inverted', 'general');
			}
		}

		// Outline
		@include modifier('outline') {
			background-color: color('button-inverted', 'general');

			box-shadow: inset 0 0 0 $base-border-width color('border', 'general');

			color: color('text-secondary', 'general');

			[class^='icon'], [class*='icon'] {
				color: color('text-secondary', 'general');
				fill: color('text-secondary', 'general');
			}
		}

		// Ghost
		@include modifier('ghost') {
			box-shadow: inset 0 0 0 $base-border-width color('border', 'general');

			color: color('text-secondary', 'general');

			[class^='icon'], [class*='icon'] {
				color: color('text-secondary', 'general');
				fill: color('text-secondary', 'general');
			}
		}

		@include modifier('main') {
			box-shadow: inset 0 0 0 $base-border-width color('button', 'general');

			&.button--flat Â {
				background-color: color('button', 'general');				

				color: pick-visible-color(
					color('button', 'general'),
					color('text', 'general'),
					color('text-inverted', 'general')
				);

				[class^='icon'], [class*='icon'] {
					color: pick-visible-color(
						color('button', 'general'),
						color('text', 'general'),
						color('text-inverted', 'general')
					);
					fill: pick-visible-color(
						color('button', 'general'),
						color('text', 'general'),
						color('text-inverted', 'general')
					);
				}			
			}

			&.button--outline {
				color: color('button', 'general');

				[class^='icon'], [class*='icon'] {
					color: color('button', 'general');
					fill: color('button', 'general');
				}	
			}
		}

		// Color
		@each $state, $hex in map-get($colors, 'state') {
			@include modifier(#{$state}) {
				box-shadow: inset 0 0 0 $base-border-width color($state, 'state');
				
				&.button--flat {
					background-color: color($state, 'state');
					
					color: color($state, 'state-text');

					[class^='icon'], [class*='icon'] {
						color: color($state, 'state-text');
						fill: color($state, 'state-text');
					}
				}

				&.button--outline {
					color: color($state, 'state');

					[class^='icon'], [class*='icon'] {
						color: color($state, 'state');
						fill: color($state, 'state');
					}
				}
			}
		}

		// Hover
		@include modifier('main--hover') {
			&:hover:not(:disabled) {
				background-color: color('button', 'general', 1, -7);

				box-shadow: inset 0 0 0 $base-border-width color('button', 'general', 1, -7);

				color: color('text-inverted', 'general');

				[class^='icon'], [class*='icon'] {
					color: color('text-inverted', 'general');					
					fill: color('text-inverted', 'general');					
				}
			}

			&.active:not(:disabled) {
				background-color: color('button', 'general');

				box-shadow: inset 0 0 0 $base-border-width color('button', 'general');

				color: color('text-inverted', 'general');

				[class^='icon'], [class*='icon'] {
					color: color('text-inverted', 'general');					
					fill: color('text-inverted', 'general');					
				}
			}
		}

		@each $state, $hex in map-get($colors, 'state') {
			@include modifier(#{$state}--hover) {
				&:hover:not(:disabled) {
					background-color: color($state, 'state', 1, -7);

					box-shadow: inset 0 0 0 $base-border-width color($state, 'state', 1, -7);

					color: pick-visible-color(
						color($state, 'state'),
						color('text', 'general'),
						color('text-inverted', 'general')
					);

					[class^='icon'], [class*='icon'] {
						color: pick-visible-color(
							color($state, 'state'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);
						fill: pick-visible-color(
							color($state, 'state'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);				
					}
				}

				&.active:not(:disabled) {
					background-color: color($state, 'state');

					box-shadow: inset 0 0 0 $base-border-width color($state, 'state');

					color: pick-visible-color(
						color($state, 'state'),
						color('text', 'general'),
						color('text-inverted', 'general')
					);

					[class^='icon'], [class*='icon'] {
						color: pick-visible-color(
							color($state, 'state'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);		
						fill: pick-visible-color(
							color($state, 'state'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);						
					}	
				}
			}
		}

		// Icon
		@include modifier('icon') {
			@include clearfix;

			position: relative;

			display: block;

			&:not(.button--icon--only):not(.button--icon--left):not(.button--icon--right) {
				@extend %row-flexbox;
				@extend .row--vertical-center;
				@extend .row--horizontal-center;

				.icon {
					padding-left: 0;
					padding-right: 0;
				}
			}

			@include modifier('only') {
				padding: 0 !important;
			}

			@include modifier('left') {
				.icon:first-of-type {
					@include position(absolute, 0 null null 0);

					border-top-left-radius: $base-border-radius;
					border-bottom-left-radius: $base-border-radius;
				}
			}

			@include modifier('right') {
				.icon:first-of-type {
					@include position(absolute, 0 0 null null);

					border-top-right-radius: $base-border-radius;
					border-bottom-right-radius: $base-border-radius;
				}
			}

			span ~ i, i ~ span {
				margin-left: $extra-small-spacing !important;
			}
		}

		// Social
		@each $social, $hex in map-get($colors, 'social') {
			@include modifier($social) {
				&.button--flat {
					background: color($social, 'social');

					color: pick-visible-color(
						color($social, 'social'),
						color('text', 'general'),
						color('text-inverted', 'general')
					);

					.icon {
						color: pick-visible-color(
							color($social, 'social'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);
						fill: pick-visible-color(
							color($social, 'social'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);
					}

					&.button--icon--left,
					&.button--icon--right {
						background: color($social, 'social', 1, -2.5);

						span {
							@extend .overflow-ellipsis;

							display: block;

							white-space: nowrap;
						}

						.icon:first-of-type {
							background: color($social, 'social');
						}
					}
				}

				&.button--outline {
					color: color($social, 'social');

					.icon {
						color: color($social, 'social');
						fill: color($social, 'social');
					}

					&:hover:not(:disabled),
					&.active:not(:disabled) {
						background: color($social, 'social');

						color: pick-visible-color(
							color($social, 'social'),
							color('text', 'general'),
							color('text-inverted', 'general')
						);

						[class^='icon'], [class*='icon'] {
							color: pick-visible-color(
								color($social, 'social'),
								color('text', 'general'),
								color('text-inverted', 'general')
							);	
							fill: pick-visible-color(
								color($social, 'social'),
								color('text', 'general'),
								color('text-inverted', 'general')
							);							
						}				
					}
				}
			}
		}

		// State
		@include modifier('state') {
			&.active:not(:disabled) {
				.state--inactive {
					display: none;
				}

				.state--active {
					display: block;
				}
			}

			&:not(.active) {
				.state--inactive {
					display: block;
				}

				.state--active {
					display: none;
				}
			}
		}

		// Pill
		@include modifier('pill') {
			border-radius: $base-button-height;

			&.button--flat {
				overflow: hidden;

				z-index: 1;
			}
		}

		// Auto 
		@include modifier('auto') {
			height: auto !important;

			padding: $small-spacing !important;

			line-height: inherit !important;
		}

		// Sizes
		@each $size in $sizes {
			@include modifier($size) {				
				height: map-get($button-sizes, $size);

				margin: (($base-element-height - map-get($button-sizes, $size)) / 2) 0 0 0;
				padding: 0 map-get($spacing-sizes, $size);

				font-size: map-get($font-sizes, $size);
				line-height: map-get($button-sizes, $size);

				&.button--pill {
					border-radius: map-get($button-sizes, $size);					
				}

				&.button--icon--left {
					padding-left: map-get($button-sizes, $size) + map-get($spacing-sizes, $size);
				}

				&.button--icon--right {
					padding-right: map-get($button-sizes, $size) + map-get($spacing-sizes, $size);
				}
			}
		}

		// Group
		@include element('group') {
			@extend %row-flexbox;

			overflow: hidden;

			display: inline-block;

			border-radius: $base-border-radius;

			box-shadow: 0 0 0 1px color('border', 'general');

			.button {
				width: 100%;

				border-radius: 0 !important;

				box-shadow: none !important;

				text-align: center;
			}

			label {
				input[type="checkbox"]:checked.hide ~ .button,
				input[type="radio"]:checked.hide ~ .button {
					@extend .button--main--hover.active;
				}
			}

			li {
				@include flex(1);

				box-shadow: 1px 0px 0px 0px color('border', 'general');

				&:first-child {
					border-top-left-radius: $base-border-radius;
					border-bottom-left-radius: $base-border-radius;
				}

				&:last-child {
					border-top-right-radius: $base-border-radius;
					border-bottom-right-radius: $base-border-radius;
				}
			}
		}
	} 
} // End if