@if $form-v1-0 {
	#{$all-text-inputs} {
		@include appearance(none);
		@include user-select(text);
		@include transition(
			border $base-duration $base-timing,
			box-shadow $base-duration $base-timing
		);
		
		display: block;

		width: 100%;
		height: $base-input-height;

		margin: 0 0 $small-spacing;
		padding: 0 $base-spacing;

		border: $base-border;
		border-radius: $base-border-radius;

		background-color: color('input', 'background');

		box-shadow: 0 0 0 transparent;

		color: color('text', 'general');
		font-size: $base-font-size;
		line-height: $base-input-height;

		&:hover {
			outline: none;

			border-color: color('border', 'general', 1, 20);
		}

		&:focus {
			outline: none;

			border-color: color('link', 'general');
		}

		&:disabled {
			background-color: color('border', 'general', 1, -5);

			cursor: no-drop;

			color: color('text', 'general', .4);
		}

		&.error {
			border-color: color('red', 'state');
		}
	}

	input,
	textarea {
		@include placeholder {
			color: color('text', 'general', .4); 
		}
	}

	.label {
		@include user-select(none);
		
		display: block;

		& > span {
			color: color('text-secondary', 'general');
			font-size: $extra-small-font-size;
		}

		#{$all-text-inputs} {		
			font-size: $base-font-size;
			font-weight: normal;		
		}

		.text {
			// @include user-select(none);
			
			display: block;

			margin-bottom: $small-spacing;

			color: color('text', 'general');
			font-size: $base-font-size;
			font-weight: normal;	
		}

		@include modifier('inline') {
			display: inline-block;
		}
	}

	.groups {
		@include element('item') {
			@extend .row;
			@extend .row--vertical-center;

			border-bottom: $base-border;

			&:last-child {
				border: none;
			}

			[class^="col__"], [class*="col__"] {
				margin: 0 !important;
			}

			label {
				margin: 0;
				
				font-size: $small-font-size;
				text-align: right
			}

		}

		// Spacing
		@each $size in $sizes {			
			@include modifier(pd-#{$size}) {
				.groups__item {
					margin: 0  (map-get($spacing-sizes, $size) * -1);
					padding: $small-spacing map-get($spacing-sizes, $size);		
				}
			}

			@include modifier(mg-#{$size}) {
				margin: (map-get($spacing-sizes, $size) * -1) 0;
			}
		}
	}

	.group {
		@extend %row-flexbox;

		position: relative;

		overflow: hidden;

		margin: 0 0 $small-spacing;

		border-radius: $base-border-radius;		

		&::before {
			@include position(absolute, 0 null null 0);

			width: 100%;
			height: 100%;
	
			box-shadow: inset 0 0 0 $base-border-width color('border', 'general');

			pointer-events: none;

			z-index: 2;

			content: '';
		}

		.button {
			position: relative;

			margin: 0 !important;

			border-radius: 0;

			z-index: 2;
		}

		input {
			@include flex(1);

			position: relative;			

			margin: 0;

			border: none;
			border-radius: 0;			

			z-index: 1;

			&:not(:focus) + .button--outline {
				&::before {
					@include position(absolute, 0 null null 0);

					width: $base-border-width;
					height: calc(100% - #{$base-border-width * 2});

					margin-top: $base-border-width;

					background-color: color('input', 'background');

					content: '';
				}
			}

			&:focus + .button--main--hover {
				@extend .button--main--hover:hover:not(:disabled);
			}

			@each $state, $hex in map-get($colors, 'state') {
				&:focus + .button--#{$state}--hover {
					@extend .button--#{$state}--hover:hover:not(:disabled);
				}
			}
		}

		@include element('context') {
			white-space: nowrap;

			span {
				@include user-select(none);

				display: block;

				height: $base-input-height;

				padding: 0 $base-spacing;

				background-color: color('border', 'general', 1, -5);

				color: pick-visible-color(
					color('border', 'general', 1, -5),
					color('text', 'general'),
					color('text-inverted', 'general')
				);
				line-height: $base-input-height;				
			}
		}

		@include modifier('sm') {
			margin: (($base-element-height - $small-input-height) / 2) 0;

			.group__context span, .button, input {
				height: $small-input-height;

				padding: 0 $small-spacing;

				font-size: $small-font-size;
				line-height: $small-input-height;
			}	
		}

		@include modifier('inverted') {
			.group__context {
				& + div > * {
					border-top-left-radius: $base-border-radius;
					border-bottom-left-radius: $base-border-radius;
				}

				span {
					border: none;

					background-color: transparent;

					color: color('text-inverted', 'general');
				}
			}

			.group__input input {
				@include placeholder {
					color: color('text-inverted', 'general', .4); 
				}

				border: none;

				background-color: color('input-inverted', 'background');

				color: color('text-inverted', 'general');
			}
		}

		&.error::before {
			box-shadow: inset 0 0 0 $base-border-width color('red', 'state');
		}
	}

	textarea {
		padding: $small-spacing $base-spacing;

		min-height: $base-input-height * 4;

		line-height: $base-line-height;
	}
} // End if