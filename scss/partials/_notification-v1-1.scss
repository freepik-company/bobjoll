@use "sass:math";
@if $notification-v1-1 {
    .notifications {
        @include position(fixed, 0 null null 0);

        width: 100%;
        height: 100%;

        pointer-events: none;

        z-index: 1000;

        %notification-position {
            @include position(absolute, null null null null);
        }

        &__content {
            padding-right: ($base-button-height - $base-spacing) + $extra-small-spacing;
        }

        @include element("top-left") {
            @extend %notification-position;

            top: 0;
            left: 0;
        }

        @include element("top-right") {
            @extend %notification-position;

            top: 0;
            right: 20px;
        }

        @include element("top-center") {
            @extend %notification-position;

            @include transform(translateX(-50%));

            top: 0;
            left: 50%;
        }

        @include element("bottom-left") {
            @extend %notification-position;

            bottom: 0;
            left: 0;
        }

        @include element("bottom-right") {
            @extend %notification-position;

            bottom: 0;
            right: 20px;
        }

        @include element("bottom-center") {
            @extend %notification-position;

            @include transform(translateX(-50%));

            bottom: 0;
            left: 50%;
        }

        @include element("center") {
            @extend %notification-position;

            @include transform(translate(-50%, -50%));

            top: 50%;
            left: 50%;
        }
    }

    .notification {
        position: relative;

        opacity: 0;

        width: 90vw;
        max-width: 680px;
        min-height: $base-element-height;

        margin: $base-spacing;
        padding: $base-spacing;

        border-radius: $base-border-radius;

        background-color: color("notification", "background");

        box-shadow: $base-box-shadow;

        pointer-events: all;

        @include element("message") {
            @include flex(1);

            padding: $small-spacing $base-element-height $small-spacing $base-spacing;

            font-size: $small-font-size;

            font-weight: 500;
        }

        @include element("state") {
            @extend .col--stretch;

            overflow: hidden;

            position: relative;

            top: $extra-small-spacing;
            left: $extra-small-spacing;

            width: $small-element-height;
            height: $small-element-height;

            border-radius: $base-border-radius;

            background-color: rgba(#fff, 0.2);

            .icon {
                @include position(absolute, 50% null null 50%);
                @include transform(translate(-50%, -50%));
            }
        }

        @include element("close") {
            &:not(.nostyle) {
                @include position(absolute, 0 0 null null);
                margin: $extra-small-spacing;
                // @include transform(translate(50%, -50%));
            }
        }

        @include element("triangle") {
            @include position(absolute, null null null null);

            &::before {
                @include triangle($base-triangle-size, color("light", "background"), down);

                display: block;

                content: "";
            }
        }

        @include modifier("no-shadow") {
            box-shadow: none;
        }

        @include modifier("static") {
            width: 100%;
            max-width: inherit;

            margin: 0 0 $base-spacing;
        }

        @include modifier("absolute") {
            @include position(absolute, null null null null);

            margin: 0;

            z-index: 99;
        }

        @include modifier("alert") {
            padding: 0;

            .notification__content {
                @extend %row-flexbox;
                @extend .row--vertical-center;
            }

            .notification__close {
                margin: math.div(($base-element-height - $small-element-height), 2);
            }
        }

        @include modifier("error") {
            background-color: color("red", "state");

            color: color("red", "state-text");

            a {
                color: color("red", "state-text", 0.75);
                font-weight: bold;

                &:hover {
                    color: color("red", "state-text");
                }
            }

            .notification__state {
                @if $icon-v2-0 {
                    .icon:not(.nostyle) {
                        @extend .icon--exclamation;
                    }
                }
            }

            .icon {
                color: color("red", "state-text");
            }
        }

        @include modifier("warning") {
            background-color: $yellow-shade-5;

            color: color("yellow", "state-text");

            a {
                color: color("yellow", "state-text", 0.75);
                font-weight: bold;

                &:hover {
                    color: color("yellow", "state-text");
                }
            }

            .notification__state {
                @if $icon-v2-0 {
                    .icon:not(.nostyle) {
                        @extend .icon--exclamation;
                    }
                }
            }

            .icon {
                color: color("yellow", "state-text");
            }
        }

        @include modifier("success") {
            background-color: $green-shade-5;

            color: color("green", "state-text");

            a {
                color: color("green", "state-text", 0.75);
                font-weight: bold;

                &:hover {
                    color: color("green", "state-text");
                }
            }

            .notification__state {
                @if $icon-v2-0 {
                    .icon:not(.nostyle) {
                        @extend .icon--check;
                    }
                }
            }

            .icon {
                color: color("green", "state-text");
            }
        }

        @include modifier("neutral") {
            background-color: color("blue", "state");

            color: color("blue", "state-text");

            a {
                color: color("blue", "state-text", 0.75);
                font-weight: bold;

                &:hover {
                    color: color("blue", "state-text");
                }
            }

            .icon {
                color: color("blue", "state-text");
            }
        }

        @include modifier("hide-disable") {
            .notification__disable {
                display: none;
            }
        }

        @include modifier("hide-close") {
            .notification__close {
                display: none;
            }
        }

        &--show {
            opacity: 1;
        }
    }
}
