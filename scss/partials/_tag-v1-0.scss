@if $tag-v1-0 {
	.tags {
		$tag-triangle-size: 6px;

		margin: 0 ($extra-small-spacing / 2) * -1 ($extra-small-spacing * -1) ($extra-small-spacing / 2) * -1;

		list-style: none;

		font-size: 0;

		li {
			@include transition($base-duration $base-timing); 

			overflow: hidden;

			display: inline-block;

			margin: 0 ($extra-small-spacing / 2) $extra-small-spacing ($extra-small-spacing / 2);
			padding: 0 $extra-small-spacing;

			border-radius: $base-border-radius;
			
			font-size: $small-font-size;
			

			&:not(.expandable__more) {
				box-shadow: inset 0 0 0 $base-border-width color('border', 'general');

				background-color: color('tags', 'background');

				color: color('tags', 'general');

				&:hover {
					background-color: color('tags-inverted', 'background');				

					button, a, .remove::before {					
						color: color('tags-inverted', 'general');
					}
				}			

				.remove {
					position: relative;

					overflow: hidden;

					float: right;

					margin: 0 ($extra-small-spacing * -1) 0 $extra-small-spacing;				
					padding: 0 0 0 ($base-triangle-size / 2);

					box-sizing: content-box; 

					cursor: pointer;

					&::before {
						@include position(absolute, 50% null null ($base-border-width * -1));
						@include transform(translate(($tag-triangle-size / 2) * -1, -50%) rotate(45deg));
						
						width: $tag-triangle-size;
						height: $tag-triangle-size;

						border: $base-border;

						background-color: color('tags', 'background');

						content: '';
					}

					&:hover {
						&::before {
							background-color: color('tags-inverted', 'background');	
						}
					}
				}
			} 

			button, a {
				@include transition($base-duration $base-timing);

				color: color('tags', 'general');			
			}
		}

		@each $size in $sizes {
			@include modifier($size) {
				li {
					height: map-get($button-sizes, $size);

					font-size: map-get($font-sizes, $size);
					line-height: map-get($button-sizes, $size) - $base-border-width;			
				}			
			}
		} // End sizes
	}
}